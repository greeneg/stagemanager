#!/usr/bin/env perl
#
#  Copyright 2020: YggdrasilSoft, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use warnings;
use utf8;
use English;

use feature ":5.30";
no warnings "experimental::signatures";
no warnings "experimental::smartmatch";
use feature "signatures";
use feature "switch";

use boolean;
use Data::Dumper;
use Errno qw(EINTR EIO :POSIX);;
use File::Basename;
use Getopt::Long qw(HelpMessage :config gnu_getopt);
use JSON;
use Try::Tiny qw(try catch);
use User::pwent;

use FindBin;
use lib "$FindBin::Bin/../lib";
use StageMgr;
use Exceptions::IO::Handler;

my $appname = basename($0);

my $config_file = '/etc/stagemgr/config.json';
my $prefix = '';

my $VERSION = $StageMgr::VERSION;

my sub show_version {
    say "Theatre - The Client-side for the StageManager Config Manager";
    say "StageManager version $VERSION";
    say "Copyright (c)2020 YggdrasilSoft, LLC.";
    say "-" x 79;
    say "\nLicensed under the Apache Public License, v2.";
    say "Full text of the license can be found here:";
    say "<https://github.com/greeneg/stagemanager/blob/master/LICENSE>";
    say "\nThis is free software: you are free to change and redistribute it under the";
    say "terms of the license linked above.";
    say "\nThere is NO WARRANTY nor GUARANTEE OF FITNESS, written or implied, to the";
    say "extent permitted by law.";
    say "\nAuthor: Gary L. Greene, Jr";
}

my sub err_log ($config, $level, @msg) {
    my $debug = $config->{'main'}->{'debug'};
    my $trace = $config->{'main'}->{'trace'};

    my $msg_prefix = undef;
    given ($level) {
        when ('debug') {
            if ($debug == true) {
                say STDERR "== DEBUGGING ==: @msg";
            }
        }
        when ('trace') {
            if ($trace == true) {
                say STDERR "== TRACE ==: @msg";
            }
        }
    }
}

my sub get_config ($config_file) {
    my $io_exceptions = Exceptions::IO::Handler->new();
    
    my $config = undef;
    try {
        open(my $fh, $config_file) or
          Exception::IO::File->throw(error => $ERRNO);
        read $fh, my $file_content, -s $fh;
        $config = decode_json($file_content);
        close $fh;
    } catch {
        die $_ unless blessed $_ && $_->can('rethrow');
        $io_exceptions->processor($_);
    };

    return $config;
}

my sub get_epic ($epic_file) {
    my $io_exceptions = Exceptions::IO::Handler->new();

    my $epic = undef;
    try {
        open(my $fh, $epic_file) or
          Exception::IO::File->throw(error => $ERRNO);
        read $fh, my $file_content, -s $fh;
        my $_e = decode_json($file_content);
        $epic = $_e->{'epicName'};
        close $fh;
    } catch {
        die $_ unless blessed $_ && $_->can('rethrow');
        $io_exceptions->processor($_);
    };

    return $epic;
}

my sub get_playbooks ($config_dir, $epic_dir, $epic_file) {
    my $io_exceptions = Exceptions::IO::Handler->new();

    my @playbooks = ();
    try {
        opendir my $dh, "$config_dir/$epic_dir" or
          Exception::IO::File->throw(error => $ERRNO);
        if (scalar(grep { $_ ne "." && $_ ne ".." } readdir($dh)) == 0) {
            Exception::IO::File->throw(error => "No such file or directory");
        }
        while (my $file = readdir($dh)) {
            next if ("$epic_dir/$file" ne $epic_file);
            open my $fh, "$epic_dir/$file" or
              Exception::IO::File->throw(error => $ERRNO);
            read $fh, my $file_content, -e $fh;
            my $_tmp_struct = decode_json($file_content);
            @playbooks = @{$_tmp_struct->{'playbooks'}};
            close $fh;
        }
        closedir $dh;
    } catch {
        die $_ unless blessed $_ && $_->can('rethrow');
        $io_exceptions->processor($_);
    };

    return @playbooks;
}

sub main {
    # read in our configuration from /$PREFIX/etc/stagemgr/config.json
    if ($EUID == 0 and ! exists $ENV{'SUDO_UID'}) {
        if ($config_file eq '/etc/stagemgr/config.json') {
            if ($prefix ne '') {
                $config_file = "${prefix}/etc/stagemgr/config.json";
            }
        }
    } else {
        if (! exists $ENV{'SUDO_UID'}) {
            $config_file = "$ENV{'HOME'}/.theatre/config.json";
        } else {
            my $pw = getpwuid($ENV{'SUDO_UID'});
            my $dir = $pw->dir;
            $config_file = "$dir/.theatre/config.json";
        }
        $prefix      = '';
    }

    my $config = get_config($config_file);

    # make a few of the config elements more easy to access
    my $config_dir = "${prefix}$config->{'main'}->{'cfgDirectory'}";
    my $epic_dir   = "$config->{'theatre'}->{'epicContentDirectory'}";
    my $epic_file  = "$config_dir/$config->{'theatre'}->{'epicFile'}";

    err_log($config, 'debug', "Config dir: $config_dir");
    err_log($config, 'debug', "epic file: $epic_file");
    err_log($config, 'debug', "epic dir: $epic_dir");

    # get the host's epic from $PREFIX/$epic_file
    my $epic = get_epic($epic_file);

    err_log($config, 'debug', "epic: $epic");

    # now read the list of playbooks an environment is configured for from
    # /$PREFIX/$config_dir/$epic_dir/$epic_file
    my @playbooks = get_playbooks($config_dir, $epic_dir, $epic_file);
    if (scalar @playbooks == 0) {
        say "The epic for this machine, '$epic', has no playbooks defined. Exiting";
        exit 0;
    }

    # iterate over the list and read their opening.scene from their playbook tree
    foreach my $playbook (@playbooks) {
        try {
            
        } catch {};
#        err_log
#    open(my $file, "/Users/greeneg/Development/configmgr/resources/files.rdsc");
#    close $file;
    }
}

GetOptions(
    'c|config=s' => \$config_file,
    'p|prefix=s' => \$prefix,
    'h|help'     => sub { HelpMessage() && exit },
    'v|version'  => sub { show_version() && exit }
);
main();

=head1 NAME

Theatre - The Client-side for the StageManager Configuration Management System

=head1 VERSION

0.0.1

=head1 AUTHOR

Gary L. Greene <greeneg at tolharadys dot net>

=head1 SYNOPSIS

Configuration options for the 'theatre' command line tool:

  -c|--config=FILE_PATH Fully-qualified location of configuratio file
                        Default: /etc/stagemgr/config.json
  -p|--prefix=PATH      Set where the application prefix
                        Default: /
  -h|--help             Display this help
  -v|--version          Display the help message

=head1 COPYRIGHT AND LICENSE

Copyright (c)2020 YggdrasilSoft, LLC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut